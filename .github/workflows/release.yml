name: Release EasySepa Package

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version number for the release (e.g. 1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and publish release
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ inputs.release_version }}
      DIST_ROOT: target/dist
      LIBERICA_VERSION: '21.0.5+11'
      LIBERICA_BASE_URL: https://download.bell-sw.com/java
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Set Maven project version
        run: ./mvnw -B -ntp versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false

      - name: Build runnable artifacts
        run: ./mvnw -B -ntp clean package

      - name: Prepare distribution layout
        run: |
          set -euo pipefail

          DIST_DIR="${DIST_ROOT}/EasySepa-${VERSION}"
          rm -rf "${DIST_ROOT}"
          mkdir -p "${DIST_DIR}/config"

          JAR_PATH="target/easysepa-${VERSION}.jar"
          if [ ! -f "${JAR_PATH}" ]; then
            echo "Packaged JAR ${JAR_PATH} was not found" >&2
            exit 1
          fi

          cp "${JAR_PATH}" "${DIST_DIR}/EasySepa-${VERSION}.jar"

          printf '%s\n' \
            '#!/usr/bin/env bash' \
            'set -euo pipefail' \
            '' \
            'SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' \
            'JAVA_HOME="${SCRIPT_DIR}/runtime/linux"' \
            'exec "${JAVA_HOME}/bin/java" -jar "${SCRIPT_DIR}/EasySepa-__VERSION__.jar" "$@"' \
            > "${DIST_DIR}/run.sh"
          sed -i "s/__VERSION__/${VERSION}/" "${DIST_DIR}/run.sh"
          chmod +x "${DIST_DIR}/run.sh"

          printf '%s\r\n' \
            '@echo off' \
            'setlocal enabledelayedexpansion' \
            'set SCRIPT_DIR=%~dp0' \
            'set JAVA_HOME=%SCRIPT_DIR%runtime\windows' \
            '"%JAVA_HOME%\\bin\\java.exe" -jar "%SCRIPT_DIR%EasySepa-__VERSION__.jar" %*' \
            > "${DIST_DIR}/run.bat"
          sed -i "s/__VERSION__/${VERSION}/" "${DIST_DIR}/run.bat"

      - name: Bundle Java runtimes with JavaFX support
        run: |
          set -euo pipefail

          DIST_DIR="${DIST_ROOT}/EasySepa-${VERSION}"
          LINUX_RUNTIME_DIR="${DIST_DIR}/runtime/linux"
          WINDOWS_RUNTIME_DIR="${DIST_DIR}/runtime/windows"

          mkdir -p "${LINUX_RUNTIME_DIR}" "${WINDOWS_RUNTIME_DIR}"

          BASE_URL="${LIBERICA_BASE_URL}/${LIBERICA_VERSION}"
          LINUX_URL="${BASE_URL}/bellsoft-jre${LIBERICA_VERSION}-linux-amd64-full.tar.gz"
          WINDOWS_URL="${BASE_URL}/bellsoft-jre${LIBERICA_VERSION}-windows-amd64-full.zip"

          curl -fsSL "${LINUX_URL}" -o linux-jre.tar.gz
          tar -xzf linux-jre.tar.gz --strip-components=1 -C "${LINUX_RUNTIME_DIR}"
          rm linux-jre.tar.gz

          curl -fsSL "${WINDOWS_URL}" -o windows-jre.zip
          TMP_DIR="$(mktemp -d)"
          unzip -q windows-jre.zip -d "${TMP_DIR}"
          rm windows-jre.zip
          FIRST_SUBDIR="$(find "${TMP_DIR}" -mindepth 1 -maxdepth 1 -type d | head -n 1)"
          if [ -z "${FIRST_SUBDIR}" ]; then
            echo "Failed to locate extracted Windows runtime" >&2
            exit 1
          fi
          cp -a "${FIRST_SUBDIR}/." "${WINDOWS_RUNTIME_DIR}/"
          rm -rf "${TMP_DIR}"

      - name: Create release archive
        run: |
          set -euo pipefail

          DIST_DIR="${DIST_ROOT}/EasySepa-${VERSION}"
          ARCHIVE="target/EasySepa-${VERSION}.zip"
          rm -f "${ARCHIVE}"
          (cd "${DIST_ROOT}" && zip -r "../EasySepa-${VERSION}.zip" "EasySepa-${VERSION}")

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.release_version }}
          release_name: EasySepa v${{ inputs.release_version }}
          draft: false
          prerelease: false

      - name: Upload distribution archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/EasySepa-${{ inputs.release_version }}.zip
          asset_name: EasySepa-${{ inputs.release_version }}.zip
          asset_content_type: application/zip
