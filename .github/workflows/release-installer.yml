name: Release EasySepa Installer

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version number for the release (e.g. 1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and publish release
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ inputs.release_version }}
      DISTRIBUTION_DIR: target/installer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Set Maven project version
        run: ./mvnw -B -ntp versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false

      - name: Build runnable artifacts
        run: ./mvnw -B -ntp clean package

      - name: Prepare installer output directory
        run: |
          set -euo pipefail
          rm -rf "${DISTRIBUTION_DIR}"
          mkdir -p "${DISTRIBUTION_DIR}"

      - name: Create application image installer
        run: ./mvnw -B -ntp jpackage:jpackage

      - name: Create self-extracting launcher
        run: |
          set -euo pipefail

          APP_NAME="EasySepa"
          APP_DIR="${DISTRIBUTION_DIR}/${APP_NAME}"
          if [ ! -d "${APP_DIR}" ]; then
            echo "Expected application image at ${APP_DIR} but it was not found" >&2
            exit 1
          fi

          INSTALLER="${DISTRIBUTION_DIR}/${APP_NAME}-${VERSION}-linux-x64.run"
          rm -f "${INSTALLER}"

          WORK_DIR="$(mktemp -d)"
          cleanup() {
            rm -rf "${WORK_DIR}"
          }
          trap cleanup EXIT

          tar -C "${APP_DIR}" -czf "${WORK_DIR}/payload.tar.gz" .

          cat <<'EOF' > "${WORK_DIR}/launcher.sh"
#!/usr/bin/env bash
set -euo pipefail

APP_NAME="EasySepa"
APP_VERSION="__VERSION__"
INSTALL_BASE="${EASYSEPA_HOME:-${HOME}/.local/share/${APP_NAME}}"
INSTALL_DIR="${INSTALL_BASE}/${APP_VERSION}"
PAYLOAD_LINE=__PAYLOAD_LINE__

mkdir -p "${INSTALL_BASE}"

if [ ! -x "${INSTALL_DIR}/bin/${APP_NAME}" ]; then
  echo "Installing ${APP_NAME} ${APP_VERSION} to ${INSTALL_DIR}"
  rm -rf "${INSTALL_DIR}"
  mkdir -p "${INSTALL_DIR}"
  tail -n +${PAYLOAD_LINE} "$0" | tar -xz -C "${INSTALL_DIR}"
else
  echo "Using existing ${APP_NAME} ${APP_VERSION} at ${INSTALL_DIR}"
fi

ln -sfn "${INSTALL_DIR}" "${INSTALL_BASE}/current"

exec "${INSTALL_BASE}/current/bin/${APP_NAME}" "$@"
exit $?
__ARCHIVE_BELOW__
EOF

          PAYLOAD_LINE=$(( $(wc -l < "${WORK_DIR}/launcher.sh") + 1 ))
          sed -i "s/__VERSION__/${VERSION}/" "${WORK_DIR}/launcher.sh"
          sed -i "s/__PAYLOAD_LINE__/${PAYLOAD_LINE}/" "${WORK_DIR}/launcher.sh"

          cat "${WORK_DIR}/launcher.sh" "${WORK_DIR}/payload.tar.gz" > "${INSTALLER}"
          chmod +x "${INSTALLER}"

      - name: Stage runnable JAR
        run: |
          set -euo pipefail

          JAR_PATH="target/easysepa-${VERSION}.jar"
          if [ ! -f "${JAR_PATH}" ]; then
            echo "Packaged JAR ${JAR_PATH} was not found" >&2
            exit 1
          fi

          cp "${JAR_PATH}" "target/EasySepa-${VERSION}.jar"

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.release_version }}
          release_name: EasySepa v${{ inputs.release_version }}
          draft: false
          prerelease: false

      - name: Upload installer asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/installer/EasySepa-${{ inputs.release_version }}-linux-x64.run
          asset_name: EasySepa-${{ inputs.release_version }}-linux-x64.run
          asset_content_type: application/octet-stream

      - name: Upload runnable JAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/EasySepa-${{ inputs.release_version }}.jar
          asset_name: EasySepa-${{ inputs.release_version }}.jar
          asset_content_type: application/java-archive
